{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "80be212a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "from matplotlib import pyplot as plt\n",
    "from sklearn import datasets\n",
    "from sklearn.metrics import mean_squared_error\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.linear_model import Ridge\n",
    "from sklearn.linear_model import Lasso\n",
    "from sklearn.linear_model import ElasticNet\n",
    "from sklearn.model_selection import train_test_split\n",
    "from sklearn.model_selection import cross_val_score\n",
    "from sklearn.model_selection import GridSearchCV\n",
    "from sklearn.model_selection import KFold\n",
    "from sklearn.datasets import load_iris"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4a89829f",
   "metadata": {},
   "source": [
    "# Gradient Descent, Normalize and Cross Validation Function"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "id": "c526b256",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_loss(x, y, coef):\n",
    "    n = len(x)\n",
    "    predictions = x.dot(coef)\n",
    "    errors= np.subtract(predictions, y)\n",
    "    sqrErrors = np.square(errors)\n",
    "    J = 1/ (2 * n) * errors.T.dot(errors)\n",
    "    \n",
    "    return J\n",
    "\n",
    "\n",
    "def gradient_descent(x, y, coefs, max_interations=1000, alpha=1):\n",
    "    n = len(x)\n",
    "    cost_history = np.zeros(max_interations)\n",
    "    for i in range(max_interations):\n",
    "        predictions = x.dot(coefs)\n",
    "        #print('predictions: ', predictions[:5])\n",
    "        errors= np.subtract(predictions, y)\n",
    "        #print('errors= ', errors[:5])\n",
    "        sum_delta = (alpha/n)*x.transpose().dot(errors);\n",
    "        #print('sum_delta= ', sum_delta[:5])\n",
    "        coefs = coefs - sum_delta;\n",
    "        cost_history[i] = get_loss(x, y, coefs)\n",
    "        \n",
    "    return coefs, cost_history\n",
    "\n",
    "def get_cv_scores(model):\n",
    "    scores = cross_val_score(model,\n",
    "                             X__train,\n",
    "                             y__train,\n",
    "                             cv=5,\n",
    "                             scoring='r2')\n",
    "    \n",
    "    print('CVs: ', scores)\n",
    "    print('CV Mean (R2): ', np.mean(scores))\n",
    "    print('STD (Desvio Padr√£o): ', np.std(scores))\n",
    "    print('\\n')\n",
    "    \n",
    "    \n",
    "def normalize(X_norm, Y_norm):\n",
    "    for column in X_norm.columns:\n",
    "        X_norm[column] = (X_norm[column] - X_norm[column].min())/(X_norm[column].max() - X_norm[column].min())\n",
    "    for column in Y_norm:\n",
    "        Y_norm = (Y_norm - Y_norm.min())/(Y_norm.max() - Y_norm.min())\n",
    "    return X_norm, Y_norm\n",
    "   "
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39d9c0f6",
   "metadata": {},
   "source": [
    "# Load DataSet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "id": "9317207b",
   "metadata": {},
   "outputs": [],
   "source": [
    "iris = load_iris()\n",
    "\n",
    "df = pd.DataFrame(data=iris.data, columns=iris.feature_names)\n",
    "\n",
    "df[\"target\"] = iris.target\n",
    "\n",
    "X = df.iloc[:, :-1]\n",
    "Y = df.iloc[:, 4]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "id": "2815b272",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)\n",
      "0                  5.1               3.5                1.4               0.2\n",
      "1                  4.9               3.0                1.4               0.2\n",
      "2                  4.7               3.2                1.3               0.2\n",
      "3                  4.6               3.1                1.5               0.2\n",
      "4                  5.0               3.6                1.4               0.2\n",
      "..                 ...               ...                ...               ...\n",
      "145                6.7               3.0                5.2               2.3\n",
      "146                6.3               2.5                5.0               1.9\n",
      "147                6.5               3.0                5.2               2.0\n",
      "148                6.2               3.4                5.4               2.3\n",
      "149                5.9               3.0                5.1               1.8\n",
      "\n",
      "[150 rows x 4 columns]\n"
     ]
    }
   ],
   "source": [
    "print(X)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4c56d004",
   "metadata": {},
   "source": [
    "# Normalizing DataSet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "id": "e8a504f0",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/var/folders/88/knx7zw015qbbjy6wrxv2zrsc0000gn/T/ipykernel_79505/3139021213.py:41: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  X_norm[column] = (X_norm[column] - X_norm[column].min())/(X_norm[column].max() - X_norm[column].min())\n"
     ]
    }
   ],
   "source": [
    "X,y = normalize(X, Y)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "id": "c284a47f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     sepal length (cm)  sepal width (cm)  petal length (cm)  petal width (cm)\n",
      "0             0.222222          0.625000           0.067797          0.041667\n",
      "1             0.166667          0.416667           0.067797          0.041667\n",
      "2             0.111111          0.500000           0.050847          0.041667\n",
      "3             0.083333          0.458333           0.084746          0.041667\n",
      "4             0.194444          0.666667           0.067797          0.041667\n",
      "..                 ...               ...                ...               ...\n",
      "145           0.666667          0.416667           0.711864          0.916667\n",
      "146           0.555556          0.208333           0.677966          0.750000\n",
      "147           0.611111          0.416667           0.711864          0.791667\n",
      "148           0.527778          0.583333           0.745763          0.916667\n",
      "149           0.444444          0.416667           0.694915          0.708333\n",
      "\n",
      "[150 rows x 4 columns]\n"
     ]
    }
   ],
   "source": [
    "print(X)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8cb8e79e",
   "metadata": {},
   "source": [
    "# Spliting DataSet"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "f976865c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Train and test split for k-fold crossvalidation\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=27)\n",
    "\n",
    "#Train(80%), Test(10%) and Validation(10%)\n",
    "X__train, X__rem, y__train, y__rem = train_test_split(X,y, train_size=0.8)\n",
    "\n",
    "X__valid, X__test, y__valid, y__test = train_test_split(X__rem,y__rem, test_size=0.5)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c3cd02ee",
   "metadata": {},
   "source": [
    "# Linear Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "1887788e",
   "metadata": {},
   "outputs": [],
   "source": [
    "reg=LinearRegression()\n",
    "reg=LinearRegression().fit(X__train,y__train)\n",
    "lr_coef = reg.coef_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "0ed6789f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([-0.24717935, -0.04098046,  0.80597335,  0.63558877])"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lr_coef"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a20eaa03",
   "metadata": {},
   "source": [
    "# Gradient Descent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "643ecda8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "First 5 values from cost_history = [0.00594869 0.00593348 0.00592282 0.00591428 0.00590745]\n",
      "Last 5 values from cost_history = [0.00586595 0.00586595 0.00586595 0.00586595 0.00586595]\n"
     ]
    }
   ],
   "source": [
    "coeficients, cost_history = gradient_descent(X__train, y__train, lr_coef)\n",
    "print('First 5 values from cost_history =', cost_history[:5])\n",
    "print('Last 5 values from cost_history =', cost_history[-5 :])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d21f8484",
   "metadata": {},
   "source": [
    "# Displaying Cost Function in gradient descent operation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "c1f401af",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Convergence of gradient descent. alpha=0.01')"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 720x432 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(range(1, 1000 +1), cost_history, color ='blue')\n",
    "plt.rcParams[\"figure.figsize\"] = (10,6)\n",
    "plt.grid()\n",
    "plt.xlabel(\"Number of iterations\")\n",
    "plt.ylabel(\"cost (J)\")\n",
    "plt.title(\"Convergence of gradient descent. alpha=0.01\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a80dde6c",
   "metadata": {},
   "source": [
    "# Great coeficients from Gradient Descent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "id": "921c7d64",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "sepal length (cm)   -0.212105\n",
       "sepal width (cm)    -0.104009\n",
       "petal length (cm)    0.723787\n",
       "petal width (cm)     0.666219\n",
       "dtype: float64"
      ]
     },
     "execution_count": 155,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "coeficients"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "d902c906",
   "metadata": {},
   "outputs": [],
   "source": [
    "reg=LinearRegression()\n",
    "reg=LinearRegression().fit(X__train,y__train)\n",
    "reg.coef_ = coeficients"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c88dd7a0",
   "metadata": {},
   "source": [
    "# Ridge Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "d1967873",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, estimator=Ridge(),\n",
       "             param_grid={'alpha': [1e-15, 1e-10, 1e-08, 0.001, 0.01, 1, 5, 10,\n",
       "                                   20, 30, 35, 40, 45, 50, 55, 100, 200, 300,\n",
       "                                   500, 1000]},\n",
       "             scoring='neg_mean_squared_error')"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ridge = Ridge()\n",
    "parameter={'alpha':[1e-15, 1e-10, 1e-8, 1e-3, 1e-2, 1, 5, 10, 20, 30, 35, 40, 45, 50, 55, 100, 200, 300, 500, 1000]}\n",
    "ridge_regressor=GridSearchCV(ridge, parameter, scoring='neg_mean_squared_error', cv=5)\n",
    "ridge_regressor.fit(X__valid, y__valid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "92b87c20",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The best alpha value:\n",
      "{'alpha': 0.01}\n",
      "The best score from that alpha:\n",
      "-0.015403971200428301\n"
     ]
    }
   ],
   "source": [
    "print(\"The best alpha value:\")\n",
    "print(ridge_regressor.best_params_)\n",
    "print(\"The best score from that alpha:\")\n",
    "print(ridge_regressor.best_score_)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3e449a08",
   "metadata": {},
   "source": [
    "# Ridge Regression with best alpha in train dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "id": "8418a23c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CVs:  [0.86605548 0.94470116 0.94136721 0.93904368 0.93041185]\n",
      "CV Mean (R2):  0.9243158770409867\n",
      "STD (Desvio Padr√£o):  0.029511525718990066\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "ridge = Ridge(alpha=0.01).fit(X__train, y__train)\n",
    "get_cv_scores(ridge)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e4d1c31d",
   "metadata": {},
   "source": [
    "# Lasso Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "b832e0f7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "GridSearchCV(cv=5, estimator=Lasso(),\n",
       "             param_grid={'alpha': [1e-15, 1e-10, 1e-08, 0.001, 0.01, 0.1, 0.5,\n",
       "                                   1, 5, 10, 20, 30, 35, 40, 45, 50, 55, 100,\n",
       "                                   200, 300, 500, 1000]},\n",
       "             scoring='neg_mean_squared_error')"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lasso=Lasso()\n",
    "parameter={'alpha':[1e-15, 1e-10, 1e-8, 1e-3, 1e-2,0.1, 0.5, 1, 5, 10, 20, 30, 35, 40, 45, 50, 55, 100, 200, 300, 500, 1000]}\n",
    "lasso_regressor=GridSearchCV(lasso, parameter, scoring='neg_mean_squared_error', cv=5)\n",
    "lasso_regressor.fit(X__valid,y__valid)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "bc571e8a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The best alpha value:\n",
      "{'alpha': 0.001}\n",
      "The best score from that alpha:\n",
      "-0.012981603372471107\n"
     ]
    }
   ],
   "source": [
    "print(\"The best alpha value:\")\n",
    "print(lasso_regressor.best_params_)\n",
    "print(\"The best score from that alpha:\")\n",
    "print(lasso_regressor.best_score_)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b540498a",
   "metadata": {},
   "source": [
    "# Lasso Regression with best alpha in train dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "id": "b70cacb5",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CVs:  [0.86788047 0.94436553 0.93662125 0.93800232 0.92713297]\n",
      "CV Mean (R2):  0.922800508619226\n",
      "STD (Desvio Padr√£o):  0.02800763766954912\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "lasso = Lasso(alpha=0.001).fit(X__train, y__train)\n",
    "get_cv_scores(lasso)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c097d7bc",
   "metadata": {},
   "source": [
    "# ElasticNet Regression"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "id": "37a91c1d",
   "metadata": {},
   "outputs": [],
   "source": [
    "en=ElasticNet()\n",
    "parameter={'alpha':[1e-15, 1e-10, 1e-8, 1e-3, 1e-2,0.1, 0.5, 1, 5, 10, 20, 30, 35, 40, 45, 50, 55, 100, 200, 300, 500, 1000]}\n",
    "en_regressor=GridSearchCV(lasso, parameter, scoring='neg_mean_squared_error', cv=5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "id": "110b6c19",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Melhor Alpha:\n",
      "{'alpha': 0.001}\n",
      "Melhor score:\n",
      "-0.012981603372471107\n"
     ]
    }
   ],
   "source": [
    "en_regressor.fit(X__valid,y__valid)\n",
    "print(\"Best Alpha:\")\n",
    "print(en_regressor.best_params_)\n",
    "print(\"Best score:\")\n",
    "print(en_regressor.best_score_)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "424b193e",
   "metadata": {},
   "source": [
    "# ElasticNet Regression with best alpha in train dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "id": "6e0838c4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "CVs:  [0.86788047 0.94436553 0.93662125 0.93800232 0.92713297]\n",
      "CV Mean (R2):  0.922800508619226\n",
      "STD (Desvio Padr√£o):  0.02800763766954912\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "en = ElasticNet(alpha=0.001).fit(X__train, y__train)\n",
    "get_cv_scores(lasso)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "fcbcfb0b",
   "metadata": {},
   "source": [
    "# Regressions Comparison"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "id": "42c0ceee",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Linear Regression CVs\n",
      "CVs:  [0.86576214 0.94460848 0.94149763 0.93895828 0.93051683]\n",
      "CV Mean (R2):  0.9242686724669795\n",
      "STD (Desvio Padr√£o):  0.02962560742451923\n",
      "\n",
      "\n",
      "Ridge CVs\n",
      "{'alpha': 0.01}\n",
      "CVs:  [0.86605548 0.94470116 0.94136721 0.93904368 0.93041185]\n",
      "CV Mean (R2):  0.9243158770409867\n",
      "STD (Desvio Padr√£o):  0.029511525718990066\n",
      "\n",
      "\n",
      "Lasso CVs\n",
      "{'alpha': 0.001}\n",
      "CVs:  [0.86788047 0.94436553 0.93662125 0.93800232 0.92713297]\n",
      "CV Mean (R2):  0.922800508619226\n",
      "STD (Desvio Padr√£o):  0.02800763766954912\n",
      "\n",
      "\n",
      "ElasticNet CVs\n",
      "{'alpha': 0.001}\n",
      "CVs:  [0.86788047 0.94436553 0.93662125 0.93800232 0.92713297]\n",
      "CV Mean (R2):  0.922800508619226\n",
      "STD (Desvio Padr√£o):  0.02800763766954912\n",
      "\n",
      "\n"
     ]
    }
   ],
   "source": [
    "print('Linear Regression CVs')\n",
    "get_cv_scores(reg)\n",
    "print('Ridge CVs')\n",
    "print(ridge_regressor.best_params_)\n",
    "get_cv_scores(ridge)\n",
    "print('Lasso CVs')\n",
    "print(lasso_regressor.best_params_)\n",
    "get_cv_scores(lasso)\n",
    "print('ElasticNet CVs')\n",
    "print(en_regressor.best_params_)\n",
    "get_cv_scores(lasso)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "382720a0",
   "metadata": {},
   "source": [
    "# Applying each trained and otimized regression in the test dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "0ff1725b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9235761413120858"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ridge.score(X__test, y__test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "16d92bd2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9234862565038686"
      ]
     },
     "execution_count": 153,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "lasso.score(X__test, y__test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "id": "a88be36d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9238770339188027"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "en.score(X__test, y__test)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "3dbe8171",
   "metadata": {},
   "source": [
    "# Exerc√≠cio 2: Valida√ß√£o Cruzada"
   ]
  },
  {
   "cell_type": "raw",
   "id": "92d7b738",
   "metadata": {},
   "source": [
    "‚Ä¢ Explain in your own words how Cross-Validation works.\n",
    "‚Ä¢ Explain in what contexts should we use it? Why?"
   ]
  },
  {
   "cell_type": "raw",
   "id": "f9b95692",
   "metadata": {},
   "source": [
    "Cross-validation consists of randomly dividing a dataset into subsets, categorizing each set for a different function. Usually divided into three parts, the subsets created are:\n",
    "\n",
    "Training Subset\n",
    " - used to train the model, and obtain the optimized coefficients\n",
    "Validation Subset\n",
    " - used to validate the model, and get the optimized alpha value\n",
    "Test Subset\n",
    " - used to test model accuracy\n",
    "\n",
    "The proportions of the subsets vary, but normally the training subset takes about 70% of the data, basically the largest portion, and the rest, about 30% to 20%, is split evenly between the validation and testing subsets.\n",
    "It is important to have a minimum of data available for each subset, if the dataset is too small and suffers a penalty in accuracy for few numbers in the subsets, the best alternative is to apply another cross-validation process, called K-fold.\n",
    "\n",
    "K-fold is a method that divides the dataset into some subgroups with equal amounts, and there is a relay of functions between them, so that from several scenarios, different results of the interactions between the subgroups, we can have a better estimate of the functioning and model accuracy, even with little data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "1b94311d",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
